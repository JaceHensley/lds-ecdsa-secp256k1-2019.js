{"version":3,"sources":["../../lds-ecdsa-secp256k1-2019/dist/esm5/universalResolver.js","../../es256k-jws-ts/dist/esm5/JWS.js","App.js","serviceWorker.js","index.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/sign.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/verify.js","../../es256k-jws-ts/dist/esm5/keyUtils.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/defaultDocumentLoader.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/createVerifyData/index.js"],"names":["tslib__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","node_fetch__WEBPACK_IMPORTED_MODULE_1__","node_fetch__WEBPACK_IMPORTED_MODULE_1___default","n","normalizeDocument","res","didDoc","didDocument","methodMetadata","publicKey","continuation","__webpack_exports__","resolve","didUri","undefined","this","_a","label","trys","push","url","headers","Accept","method","then","data","json","sent","Error","Buffer","base64url__WEBPACK_IMPORTED_MODULE_1__","base64url__WEBPACK_IMPORTED_MODULE_1___default","bitcoin_ts__WEBPACK_IMPORTED_MODULE_2__","crypto__WEBPACK_IMPORTED_MODULE_3__","crypto__WEBPACK_IMPORTED_MODULE_3___default","_keyUtils__WEBPACK_IMPORTED_MODULE_4__","JWSVerificationFailed","_super","message","_this","call","name","decode","jws","options","complete","split","encodedHeader","encodedPayload","encodedSignature","header","JSON","parse","a","payload","signature","sign","privateKeyJWK","alg","privateKeyUInt8Array","secp256k1","toBeSigned","digest","messageHashUInt8Array","signatureUInt8Array","signatureHex","Object","encode","stringify","from","createHash","update","toString","signMessageHashCompact","signDetached","b64","crit","toBeSignedBuffer","concat","buffer","byteOffset","length","verify","publicKeyJWK","publicKeyUInt8Array","_b","toBuffer","verifySignatureCompact","verifyDetached","indexOf","privateJWK","crv","d","kid","kty","x","y","publicJWK","signatureOptions","challenge","created","domain","proofPurpose","verificationMethod","doc","@context","action","schema","App","state","JWS","ES256K","hello","verified","setState","EcsdaSecp256k1Signature2019","ldSig","lsSigVerified","react_default","createElement","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","_createVerifyData__WEBPACK_IMPORTED_MODULE_1__","_transmute_es256k_jws_ts__WEBPACK_IMPORTED_MODULE_2__","_defaultDocumentLoader__WEBPACK_IMPORTED_MODULE_3__","privateKeyJwk","proof","documentLoader","framed","verifyDataHexString","verifyDataBuffer","type","_transmute_es256k_jws_ts__WEBPACK_IMPORTED_MODULE_3__","_defaultDocumentLoader__WEBPACK_IMPORTED_MODULE_4__","resolvePublicKey","result","Promise","reject","err","publicKeyJwk","publicKeyHex","publicJWKFromPublicKeyHex","privateKeyUInt8ArrayFromJWK","publicKeyUInt8ArrayFromJWK","_trust_keyto__WEBPACK_IMPORTED_MODULE_1__","_trust_keyto__WEBPACK_IMPORTED_MODULE_1___default","base64url__WEBPACK_IMPORTED_MODULE_2__","base64url__WEBPACK_IMPORTED_MODULE_2___default","bitcoin_ts__WEBPACK_IMPORTED_MODULE_4__","json_stringify_deterministic__WEBPACK_IMPORTED_MODULE_5__","json_stringify_deterministic__WEBPACK_IMPORTED_MODULE_5___default","getKid","jwk","copy","privateKeyHexFromJWK","publicKeyHexFromJWK","uncompressedPublicKey","compressed","compressPublicKey","privateKeyHex","recoverPublicKeyHex","messageHash","v","r","s","messageHashBin","publicKeyBin","recoverPublicKeyCompressed","getCompressedPublicKeyHex","expandedPublicKeyHex","expandedPublicKeyBin","compressedPublicKeyBin","binToHex","hexToBin","privateJWKFromPrivateKeyHex","toJwk","privateJWKFromPrivateKeyPem","privateKeyPem","key","uncompressPublicKey","publicJWKFromPublicKeyPem","publicKeyPem","process","jsonld__WEBPACK_IMPORTED_MODULE_1__","jsonld__WEBPACK_IMPORTED_MODULE_1___default","_universalResolver__WEBPACK_IMPORTED_MODULE_2__","versions","node","self","documentLoaders","xhr","callback","e_1","_i","id","contextUrl","documentUrl","crypto__WEBPACK_IMPORTED_MODULE_1__","crypto__WEBPACK_IMPORTED_MODULE_1___default","jsonld__WEBPACK_IMPORTED_MODULE_2__","jsonld__WEBPACK_IMPORTED_MODULE_2___default","canonize","sha256","h","cannonizeSignatureOptions","_signatureOptions","signatureValue","proofValue","cannonizeDocument","_doc","expanded","cannonizedSignatureOptions","hashOfCannonizedSignatureOptions","cannonizedDocument","hashOfCannonizedDocument","creator","Date","toISOString","expand","compact","skipExpansion"],"mappings":"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","file":"static/js/main.d76606d5.chunk.js","sourcesContent":["var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport fetch from 'node-fetch';\n\nvar getJson = function getJson(url) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      return [2\n      /*return*/\n      , fetch(url, {\n        headers: {\n          Accept: 'application/ld+json'\n        },\n        method: 'get'\n      }).then(function (data) {\n        return data.json();\n      })];\n    });\n  });\n};\n\nvar normalizeDocument = function normalizeDocument(res) {\n  var didDoc = tslib_1.__assign({}, res.didDocument); // hack for BTCR.\n\n\n  if (res.methodMetadata) {\n    didDoc.publicKey = res.methodMetadata.continuation.publicKey;\n  }\n\n  return didDoc;\n};\n\nexport default {\n  resolve: function resolve(didUri) {\n    return tslib_1.__awaiter(_this, void 0, void 0, function () {\n      var res, doc, e_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , getJson('https://uniresolver.io/1.0/identifiers/' + didUri)];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , normalizeDocument(res)];\n\n          case 2:\n            doc = _a.sent();\n            return [2\n            /*return*/\n            , doc];\n\n          case 3:\n            e_1 = _a.sent();\n            throw new Error('Could not resolve: ' + didUri);\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n};","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport base64url from 'base64url';\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\nimport crypto from 'crypto';\nimport { privateKeyUInt8ArrayFromJWK, publicKeyUInt8ArrayFromJWK } from './keyUtils';\n/** error matching @panva/jose for JWS verification failure. */\n\nvar JWSVerificationFailed =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(JWSVerificationFailed, _super);\n\n  function JWSVerificationFailed(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'JWSVerificationFailed';\n    return _this;\n  }\n\n  return JWSVerificationFailed;\n}(Error);\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\n\n\nexport var signDetached = function signDetached( // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\npayload, privateKeyJWK, header) {\n  if (header === void 0) {\n    header = {\n      alg: 'ES256K',\n      b64: false,\n      crit: ['b64']\n    };\n  }\n\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyUInt8Array, secp256k1, encodedHeader, toBeSignedBuffer, message, digest, messageHashUInt8Array, signatureUInt8Array, signatureHex, encodedSignature;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyUInt8ArrayFromJWK(privateKeyJWK)];\n\n        case 1:\n          privateKeyUInt8Array = _a.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _a.sent();\n          encodedHeader = base64url.encode(JSON.stringify(header));\n          toBeSignedBuffer = Buffer.concat([Buffer.from(encodedHeader + '.', 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]);\n          message = Buffer.from(toBeSignedBuffer);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = secp256k1.signMessageHashCompact(privateKeyUInt8Array, messageHashUInt8Array);\n          signatureHex = binToHex(signatureUInt8Array);\n          encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n          return [2\n          /*return*/\n          , encodedHeader + \"..\" + encodedSignature];\n      }\n    });\n  });\n};\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\n\nexport var verifyDetached = function verifyDetached(jws, payload, publicKeyJWK) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var _a, encodedHeader, encodedSignature, header, publicKeyUInt8Array, secp256k1, toBeSignedBuffer, message, digest, messageHashUInt8Array, signatureUInt8Array, verified;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (jws.indexOf('..') === -1) {\n            throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n          }\n\n          _a = jws.split('..'), encodedHeader = _a[0], encodedSignature = _a[1];\n          header = JSON.parse(base64url.decode(encodedHeader));\n\n          if (header.alg !== 'ES256K') {\n            throw new Error('JWS alg is not signed with ES256K.');\n          }\n\n          if (header.b64 !== false || !header.crit || !header.crit.length || header.crit[0] !== 'b64') {\n            throw new Error('JWS Header is not in rfc7797 format (not detached).');\n          }\n\n          return [4\n          /*yield*/\n          , publicKeyUInt8ArrayFromJWK(publicKeyJWK)];\n\n        case 1:\n          publicKeyUInt8Array = _b.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _b.sent();\n          toBeSignedBuffer = Buffer.concat([Buffer.from(encodedHeader + '.', 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]);\n          message = Buffer.from(toBeSignedBuffer);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = hexToBin(base64url.toBuffer(encodedSignature).toString('hex'));\n          verified = secp256k1.verifySignatureCompact(signatureUInt8Array, publicKeyUInt8Array, messageHashUInt8Array);\n\n          if (verified) {\n            return [2\n            /*return*/\n            , true];\n          }\n\n          throw new Error('Cannot verify detached signature.');\n      }\n    });\n  });\n};\n/** Produce a normal ES256K JWS */\n\nexport var sign = function sign(payload, privateKeyJWK, header) {\n  if (header === void 0) {\n    header = {\n      alg: 'ES256K'\n    };\n  }\n\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyUInt8Array, secp256k1, encodedHeader, encodedPayload, toBeSigned, message, digest, messageHashUInt8Array, signatureUInt8Array, signatureHex, encodedSignature;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyUInt8ArrayFromJWK(privateKeyJWK)];\n\n        case 1:\n          privateKeyUInt8Array = _a.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _a.sent();\n          encodedHeader = base64url.encode(JSON.stringify(header));\n          encodedPayload = base64url.encode(JSON.stringify(payload));\n          toBeSigned = encodedHeader + \".\" + encodedPayload;\n          message = Buffer.from(toBeSigned);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = secp256k1.signMessageHashCompact(privateKeyUInt8Array, messageHashUInt8Array);\n          signatureHex = binToHex(signatureUInt8Array);\n          encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n          return [2\n          /*return*/\n          , encodedHeader + \".\" + encodedPayload + \".\" + encodedSignature];\n      }\n    });\n  });\n};\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\n\nexport var verify = function verify(jws, publicKeyJWK) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, publicKeyUInt8Array, _a, encodedHeader, encodedPayload, encodedSignature, toBeSigned, message, digest, messageHashUInt8Array, signatureUInt8Array, verified;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _b.sent();\n          return [4\n          /*yield*/\n          , publicKeyUInt8ArrayFromJWK(publicKeyJWK)];\n\n        case 2:\n          publicKeyUInt8Array = _b.sent();\n          _a = jws.split('.'), encodedHeader = _a[0], encodedPayload = _a[1], encodedSignature = _a[2];\n          toBeSigned = encodedHeader + \".\" + encodedPayload;\n          message = Buffer.from(toBeSigned);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = hexToBin(base64url.toBuffer(encodedSignature).toString('hex'));\n          verified = secp256k1.verifySignatureCompact(signatureUInt8Array, publicKeyUInt8Array, messageHashUInt8Array);\n\n          if (verified) {\n            return [2\n            /*return*/\n            , JSON.parse(base64url.decode(encodedPayload))];\n          }\n\n          throw new JWSVerificationFailed('signature verification failed');\n      }\n    });\n  });\n};\n/** decode a JWS (without verifying it) */\n\nexport var decode = function decode(jws, options) {\n  if (options === void 0) {\n    options = {\n      complete: false\n    };\n  }\n\n  var _a = jws.split('.'),\n      encodedHeader = _a[0],\n      encodedPayload = _a[1],\n      encodedSignature = _a[2];\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature\n    };\n  }\n\n  return JSON.parse(base64url.decode(encodedPayload));\n};\nexport default {\n  decode: decode,\n  sign: sign,\n  signDetached: signDetached,\n  verify: verify,\n  verifyDetached: verifyDetached\n};","import React from 'react';\n\nimport * as ES256K from '@transmute/es256k-jws-ts';\n\nimport * as EcsdaSecp256k1Signature2019 from '@transmute/lds-ecdsa-secp256k1-2019';\n\nconst privateJWK = {\n  crv: 'secp256k1',\n  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw',\n  kty: 'EC',\n  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n};\n\nconst publicJWK = {\n  crv: 'secp256k1',\n  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw',\n  kty: 'EC',\n  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n};\n\nconst signatureOptions = {\n  challenge: 'abc',\n  created: '2019-01-16T20:13:10Z',\n  domain: 'example.com',\n  proofPurpose: 'authentication',\n  verificationMethod:\n    'did:btcr:xxcl-lzpq-q83a-0d5#key-JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw',\n};\nconst doc = {\n  '@context': {\n    action: 'schema:action',\n    schema: 'http://schema.org/',\n  },\n  action: 'AuthenticateMe',\n};\n\nclass App extends React.Component {\n  state = {\n    JWS: '',\n  };\n  async componentWillMount() {\n    const jws = await ES256K.JWS.sign(\n      {\n        hello: 'world',\n      },\n      privateJWK\n    );\n    const verified = await ES256K.JWS.verify(jws, publicJWK);\n    this.setState({\n      jws,\n      verified,\n    });\n\n    const options = {};\n    const ldSig = await EcsdaSecp256k1Signature2019.sign(\n      doc,\n      signatureOptions,\n      privateJWK,\n      options\n    );\n\n    const lsSigVerified = await EcsdaSecp256k1Signature2019.verify(\n      ldSig,\n      options\n    );\n\n    this.setState({\n      ldSig,\n      lsSigVerified,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h4>ES256K</h4>\n\n        <h5>Public Key</h5>\n        <pre>{JSON.stringify(publicJWK, null, 2)}</pre>\n\n        <h5>JWS</h5>\n        <code>{this.state.jws}</code>\n\n        <h5>Verified Payload</h5>\n        <code>{JSON.stringify(this.state.verified, null, 2)}</code>\n\n        <hr />\n\n        <h5>JSON-LD Signature</h5>\n        <pre>{JSON.stringify(this.state.ldSig, null, 2)}</pre>\n\n        <h5>Verified JSON-LD Signature</h5>\n        <code>{JSON.stringify(this.state.lsSigVerified, null, 2)}</code>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport createVerifyData from './createVerifyData';\nimport { JWS } from '@transmute/es256k-jws-ts';\nimport defaultDocumentLoader from './defaultDocumentLoader';\n/**\n * Example\n * ```ts\n * const privateJWK = {\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw',\n *  kty: 'EC',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n * };\n * const signatureOptions = {\n *    challenge: 'abc',\n *    created: '2019-01-16T20:13:10Z',\n *    domain: 'example.com',\n *    proofPurpose: 'authentication',\n *    verificationMethod: 'https://example.com/i/alice/keys/2',\n * };\n * const doc = {\n *    '@context': 'https://w3id.org/identity/v1',\n *    title: 'Hello World!',\n * };\n *\n * const signed = await sign(doc, signatureOptions, privateJWK);\n * ```\n *\n * This functions takes a json-ld document, signature options,\n * and a JWK private key, and returns the document with a proof attribute.\n */\n\nexport var sign = function sign(payload, signatureOptions, privateKeyJwk, options) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var proof, documentLoader, _a, framed, verifyDataHexString, verifyDataBuffer, jws, documentWithProof;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          proof = tslib_1.__assign({}, signatureOptions, {\n            type: 'EcdsaSecp256k1Signature2019'\n          });\n          documentLoader = options.documentLoader || defaultDocumentLoader;\n          return [4\n          /*yield*/\n          , createVerifyData(payload, proof, documentLoader)];\n\n        case 1:\n          _a = _b.sent(), framed = _a.framed, verifyDataHexString = _a.verifyDataHexString;\n          verifyDataBuffer = Buffer.from(verifyDataHexString, 'hex');\n          return [4\n          /*yield*/\n          , JWS.signDetached(verifyDataBuffer, privateKeyJwk)];\n\n        case 2:\n          jws = _b.sent();\n          documentWithProof = tslib_1.__assign({}, framed, {\n            proof: tslib_1.__assign({}, proof, {\n              jws: jws\n            })\n          });\n          return [2\n          /*return*/\n          , documentWithProof];\n      }\n    });\n  });\n};","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport createVerifyData from './createVerifyData';\nimport { JWS, keyUtils } from '@transmute/es256k-jws-ts';\nimport defaultDocumentLoader from './defaultDocumentLoader';\n\nvar resolvePublicKey = function resolvePublicKey(documentLoader, verificationMethod) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var result;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , new Promise(function (resolve, reject) {\n            documentLoader(verificationMethod, function (err, data) {\n              if (err) {\n                return reject(err);\n              }\n\n              return resolve(data);\n            });\n          })];\n\n        case 1:\n          result = _a.sent();\n\n          if (result.document.publicKeyJwk) {\n            return [2\n            /*return*/\n            , result.document.publicKeyJwk];\n          }\n\n          if (result.document.publicKeyHex) {\n            return [2\n            /*return*/\n            , keyUtils.publicJWKFromPublicKeyHex(result.document.publicKeyHex)];\n          }\n\n          throw new Error('Invalid verificationMethod key format');\n      }\n    });\n  });\n};\n/**\n * Example\n * ```ts\n * const publicJWK = {\n *   crv: 'secp256k1',\n *   kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw',\n *   kty: 'EC',\n *   x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *   y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n * };\n * const signed = {\n *   '@context': 'https://w3id.org/security/v2',\n *   'http://schema.org/action': 'AuthenticateMe',\n *   proof: {\n *     challenge: 'abc',\n *     created: '2019-01-16T20:13:10Z',\n *     domain: 'example.com',\n *     proofPurpose: 'authentication',\n *     verificationMethod: 'https://example.com/i/alice/keys/2',\n *     type: 'EcdsaSecp256k1Signature2019',\n *     jws: 'eyJhbGciOiJFUzI1NksiLCJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCJdfQ..QgbRWT8w1LJet_KFofNfz_TVs27z4pwdPwUHhXYUaFlKicBQp6U1H5Kx-mST6uFvIyOqrYTJifDijZbtAfi0MA'\n *   }\n * }\n *\n * const verified = await verify(signed, publicJWK);\n * ```\n *\n * This functions takes a signed json-ld document, and JWK public key and\n * returns true if the document was signed by the public key, false otherwise.\n */\n\n\nexport var verify = function verify(payload, options) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var publicKeyJwk, documentLoader, verifyDataHexString, verifyDataBuffer;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          documentLoader = options.documentLoader || defaultDocumentLoader;\n          return [4\n          /*yield*/\n          , resolvePublicKey(documentLoader, payload.proof.verificationMethod)];\n\n        case 1:\n          publicKeyJwk = _a.sent();\n          return [4\n          /*yield*/\n          , createVerifyData(payload, payload.proof, documentLoader)];\n\n        case 2:\n          verifyDataHexString = _a.sent().verifyDataHexString;\n          verifyDataBuffer = Buffer.from(verifyDataHexString, 'hex');\n          return [2\n          /*return*/\n          , JWS.verifyDetached(payload.proof.jws, verifyDataBuffer, publicKeyJwk)];\n      }\n    });\n  });\n};","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\nimport stringify from 'json-stringify-deterministic';\nvar compressedHexEncodedPublicKeyLength = 66;\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on JWK.\n */\n\nexport var getKid = function getKid(jwk) {\n  var copy = tslib_1.__assign({}, jwk);\n\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  var digest = crypto.createHash('sha256').update(stringify(copy)).digest();\n  return base64url.encode(Buffer.from(digest));\n};\n/** convert compressed hex encoded private key to jwk */\n\nexport var privateJWKFromPrivateKeyHex = function privateJWKFromPrivateKeyHex(privateKeyHex) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var jwk, kid;\n    return tslib_1.__generator(this, function (_a) {\n      jwk = tslib_1.__assign({}, keyto.from(privateKeyHex, 'blk').toJwk('private'), {\n        crv: 'secp256k1'\n      });\n      kid = getKid(jwk);\n      return [2\n      /*return*/\n      , tslib_1.__assign({}, jwk, {\n        kid: kid\n      })];\n    });\n  });\n};\n/** convert compressed hex encoded public key to jwk */\n\nexport var publicJWKFromPublicKeyHex = function publicJWKFromPublicKeyHex(publicKeyHex) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, key, jwk, kid;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          key = publicKeyHex;\n\n          if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n            key = binToHex(secp256k1.uncompressPublicKey(hexToBin(publicKeyHex)));\n          }\n\n          jwk = tslib_1.__assign({}, keyto.from(key, 'blk').toJwk('public'), {\n            crv: 'secp256k1'\n          });\n          kid = getKid(jwk);\n          return [2\n          /*return*/\n          , tslib_1.__assign({}, jwk, {\n            kid: kid\n          })];\n      }\n    });\n  });\n};\n/** convert pem encoded private key to jwk */\n\nexport var privateJWKFromPrivateKeyPem = function privateJWKFromPrivateKeyPem(privateKeyPem) {\n  var jwk = tslib_1.__assign({}, keyto.from(privateKeyPem, 'pem').toJwk('private'), {\n    crv: 'secp256k1'\n  }); // console.log(jwk);\n\n\n  var kid = getKid(jwk);\n  return tslib_1.__assign({}, jwk, {\n    kid: kid\n  });\n};\n/** convert pem encoded private key to jwk */\n\nexport var publicJWKFromPublicKeyPem = function publicJWKFromPublicKeyPem(publicKeyPem) {\n  var jwk = tslib_1.__assign({}, keyto.from(publicKeyPem, 'pem').toJwk('public'), {\n    crv: 'secp256k1'\n  });\n\n  var kid = getKid(jwk);\n  return tslib_1.__assign({}, jwk, {\n    kid: kid\n  });\n};\n/** convert jwk to hex encoded private key */\n\nexport var privateKeyHexFromJWK = function privateKeyHexFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      return [2\n      /*return*/\n      , keyto.from(tslib_1.__assign({}, jwk, {\n        crv: 'K-256'\n      }), 'jwk').toString('blk', 'private')];\n    });\n  });\n};\n/** convert jwk to hex encoded public key */\n\nexport var publicKeyHexFromJWK = function publicKeyHexFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, uncompressedPublicKey, compressed;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          uncompressedPublicKey = keyto.from(tslib_1.__assign({}, jwk, {\n            crv: 'K-256'\n          }), 'jwk').toString('blk', 'public');\n          compressed = secp256k1.compressPublicKey(hexToBin(uncompressedPublicKey));\n          return [2\n          /*return*/\n          , binToHex(compressed)];\n      }\n    });\n  });\n};\n/** convert jwk to binary encoded private key */\n\nexport var privateKeyUInt8ArrayFromJWK = function privateKeyUInt8ArrayFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyHex;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyHexFromJWK(jwk)];\n\n        case 1:\n          privateKeyHex = _a.sent();\n          return [2\n          /*return*/\n          , hexToBin(privateKeyHex)];\n      }\n    });\n  });\n};\n/** convert jwk to binary encoded public key */\n\nexport var publicKeyUInt8ArrayFromJWK = function publicKeyUInt8ArrayFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var publicKeyHex;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , publicKeyHexFromJWK(jwk)];\n\n        case 1:\n          publicKeyHex = _a.sent();\n          return [2\n          /*return*/\n          , hexToBin(publicKeyHex)];\n      }\n    });\n  });\n};\nexport var recoverPublicKeyHex = function recoverPublicKeyHex(messageHash, v, r, s) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, signature, messageHashBin, publicKeyBin, publicKeyHex;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          signature = hexToBin(r + s);\n          messageHashBin = hexToBin(messageHash);\n          publicKeyBin = secp256k1.recoverPublicKeyCompressed(signature, v, messageHashBin);\n          publicKeyHex = binToHex(publicKeyBin);\n          return [2\n          /*return*/\n          , publicKeyHex];\n      }\n    });\n  });\n};\nexport var getCompressedPublicKeyHex = function getCompressedPublicKeyHex(expandedPublicKeyHex) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, expandedPublicKeyBin, compressedPublicKeyBin;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          expandedPublicKeyBin = hexToBin(expandedPublicKeyHex);\n          compressedPublicKeyBin = secp256k1.compressPublicKey(expandedPublicKeyBin);\n          return [2\n          /*return*/\n          , binToHex(compressedPublicKeyBin)];\n      }\n    });\n  });\n};\nexport default {\n  recoverPublicKeyHex: recoverPublicKeyHex,\n  getCompressedPublicKeyHex: getCompressedPublicKeyHex,\n  binToHex: binToHex,\n  getKid: getKid,\n  hexToBin: hexToBin,\n  privateJWKFromPrivateKeyHex: privateJWKFromPrivateKeyHex,\n  privateJWKFromPrivateKeyPem: privateJWKFromPrivateKeyPem,\n  privateKeyHexFromJWK: privateKeyHexFromJWK,\n  privateKeyUInt8ArrayFromJWK: privateKeyUInt8ArrayFromJWK,\n  publicJWKFromPublicKeyHex: publicJWKFromPublicKeyHex,\n  publicJWKFromPublicKeyPem: publicJWKFromPublicKeyPem,\n  publicKeyHexFromJWK: publicKeyHexFromJWK,\n  publicKeyUInt8ArrayFromJWK: publicKeyUInt8ArrayFromJWK\n};","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport jsonld from 'jsonld';\nimport resolver from './universalResolver';\n\nvar _nodejs = // tslint:disable-next-line\ntypeof process !== 'undefined' && process.versions && process.versions.node;\n\nvar _browser = // tslint:disable-next-line\n!_nodejs && (typeof window !== 'undefined' || typeof self !== 'undefined');\n\nvar documentLoader = _browser ? jsonld.documentLoaders.xhr() : jsonld.documentLoaders.node();\nexport default (function (url, callback) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var doc, e_1, _i, _a, publicKey;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(url.indexOf('did:') === 0)) return [3\n          /*break*/\n          , 5];\n          doc = void 0;\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , resolver.resolve(url)];\n\n        case 2:\n          doc = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _b.sent();\n          callback(e_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          // TODO: add proper jsonld logic for iterating all possible DID URIs.\n          // iterate public keys, find the correct id...\n          for (_i = 0, _a = doc.publicKey; _i < _a.length; _i++) {\n            publicKey = _a[_i];\n\n            if (publicKey.id === url) {\n              return [2\n              /*return*/\n              , callback(null, {\n                contextUrl: null,\n                document: publicKey,\n                documentUrl: url\n              })];\n            }\n          }\n\n          _b.label = 5;\n\n        case 5:\n          //   is this a published (public) context?\n          return [2\n          /*return*/\n          , documentLoader(url, callback)];\n      }\n    });\n  });\n});","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport crypto from 'crypto';\nimport jsonld from 'jsonld';\n\nvar canonize = function canonize(data) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      return [2\n      /*return*/\n      , jsonld.canonize(data)];\n    });\n  });\n};\n\nvar sha256 = function sha256(data) {\n  var h = crypto.createHash('sha256');\n  h.update(data);\n  return h.digest('hex');\n};\n\nvar cannonizeSignatureOptions = function cannonizeSignatureOptions(signatureOptions) {\n  var _signatureOptions = tslib_1.__assign({}, signatureOptions, {\n    '@context': 'https://w3id.org/security/v2'\n  });\n\n  delete _signatureOptions.jws;\n  delete _signatureOptions.signatureValue;\n  delete _signatureOptions.proofValue;\n  return canonize(_signatureOptions);\n};\n\nvar cannonizeDocument = function cannonizeDocument(doc) {\n  var _doc = tslib_1.__assign({}, doc);\n\n  delete _doc.proof;\n  return canonize(_doc);\n};\n/**\n * Example\n * ```ts\n * const signatureOptions = {\n *    challenge: 'abc',\n *    created: '2019-01-16T20:13:10Z',\n *    domain: 'example.com',\n *    proofPurpose: 'authentication',\n *    verificationMethod: 'https://example.com/i/alice/keys/2',\n * };\n * const doc = {\n *    '@context': 'https://w3id.org/identity/v1',\n *    title: 'Hello World!',\n * };\n *\n * const verifyData = await createVerifyData(doc, signatureOptions);\n * expect(verifyData).toEqual({\n *    framed: {\n *      '@context': 'https://w3id.org/security/v2',\n *      'dc:title': 'Hello World!',\n *    },\n *    verifyDataHexString:\n *      '16ec94c1612c48b916bae6002db32df122e8c20d0fee156778c630e51f0cb3cb9ac6f24c9632f44d7c5752c5eed022f226c8ddb535ad2420d8852c9798f89175',\n * });\n * ```\n * This functions takes a json-ld document and signature options,\n * and produces the hex encoded data used by json-ld signature suite.\n * See [create-verify-hash-algorithm](https://w3c-dvcg.github.io/ld-signatures/#create-verify-hash-algorithm)\n */\n\n\nvar createVerifyData = function createVerifyData(data, signatureOptions, documentLoader) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var options, expanded, framed, cannonizedSignatureOptions, hashOfCannonizedSignatureOptions, cannonizedDocument, hashOfCannonizedDocument;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          options = tslib_1.__assign({}, signatureOptions);\n\n          if (options.creator) {\n            options.verificationMethod = signatureOptions.creator;\n          }\n\n          if (!options.verificationMethod) {\n            throw new Error('signatureOptions.verificationMethod is required');\n          }\n\n          if (!options.created) {\n            options.created = new Date().toISOString();\n          }\n\n          return [4\n          /*yield*/\n          , jsonld.expand(data, {\n            documentLoader: documentLoader\n          })];\n\n        case 1:\n          expanded = _a.sent()[0];\n          return [4\n          /*yield*/\n          , jsonld.compact(expanded, 'https://w3id.org/security/v2', {\n            skipExpansion: true\n          })];\n\n        case 2:\n          framed = _a.sent();\n          return [4\n          /*yield*/\n          , cannonizeSignatureOptions(options)];\n\n        case 3:\n          cannonizedSignatureOptions = _a.sent();\n          hashOfCannonizedSignatureOptions = sha256(cannonizedSignatureOptions);\n          return [4\n          /*yield*/\n          , cannonizeDocument(framed)];\n\n        case 4:\n          cannonizedDocument = _a.sent();\n          hashOfCannonizedDocument = sha256(cannonizedDocument);\n          return [2\n          /*return*/\n          , {\n            framed: framed,\n            verifyDataHexString: hashOfCannonizedSignatureOptions + hashOfCannonizedDocument\n          }];\n      }\n    });\n  });\n};\n\nexport default createVerifyData;"],"sourceRoot":""}