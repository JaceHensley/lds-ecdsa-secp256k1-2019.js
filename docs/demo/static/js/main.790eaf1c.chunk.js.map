{"version":3,"sources":["../../es256k-jws-ts/dist/esm5/keyUtils.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/EcdsaSecp256k1KeyClass2019.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/EcdsaSecp256k1Signature2019.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/defaultDocumentLoader.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/convertFragmentsToURIs.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/universalResolver.js","../../es256k-jws-ts/dist/esm5/JWS.js","../../lds-ecdsa-secp256k1-2019/dist/esm5/index.js","App.js","serviceWorker.js","index.js"],"names":["Buffer","__webpack_require__","d","__webpack_exports__","privateKeyUInt8ArrayFromJWK","publicKeyUInt8ArrayFromJWK","tslib__WEBPACK_IMPORTED_MODULE_0__","_trust_keyto__WEBPACK_IMPORTED_MODULE_1__","_trust_keyto__WEBPACK_IMPORTED_MODULE_1___default","n","base64url__WEBPACK_IMPORTED_MODULE_2__","base64url__WEBPACK_IMPORTED_MODULE_2___default","crypto__WEBPACK_IMPORTED_MODULE_3__","crypto__WEBPACK_IMPORTED_MODULE_3___default","bitcoin_ts__WEBPACK_IMPORTED_MODULE_4__","json_stringify_deterministic__WEBPACK_IMPORTED_MODULE_5__","json_stringify_deterministic__WEBPACK_IMPORTED_MODULE_5___default","getKid","jwk","copy","kid","alg","digest","a","createHash","update","encode","from","privateKeyHexFromJWK","undefined","this","_a","crv","toString","publicKeyHexFromJWK","secp256k1","uncompressedPublicKey","compressed","label","Object","sent","compressPublicKey","privateKeyHex","publicKeyHex","binToHex","hexToBin","privateJWKFromPrivateKeyHex","toJwk","privateJWKFromPrivateKeyPem","privateKeyPem","publicJWKFromPublicKeyHex","key","length","uncompressPublicKey","publicJWKFromPublicKeyPem","publicKeyPem","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default","tslib__WEBPACK_IMPORTED_MODULE_4__","_transmute_es256k_jws_ts__WEBPACK_IMPORTED_MODULE_5__","_transmute_es256k_jws_ts__WEBPACK_IMPORTED_MODULE_6__","base64url__WEBPACK_IMPORTED_MODULE_7__","base64url__WEBPACK_IMPORTED_MODULE_7___default","EcdsaSecp256k1KeyClass2019","options","controller","type","privateKeyJwk","publicKeyJwk","assign","id","fingerprint","value","_ref4","temp","sign","_ref2","data","mark","_callee2","header","toBeSigned","wrap","_context2","prev","next","b64","crit","buffer","byteOffset","abrupt","signDetached","stop","_ref","_callee","_context","Error","verify","_ref3","signature","_callee4","_signature$split","_signature$split2","encodedHeader","verified","payload","_context4","split","JSON","parse","decode","t0","Array","isArray","keys","concat","verifyDetached","t1","console","error","_callee3","_context3","publicKeyNode","publicNode","addEncodedPublicKey","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_5__","_Users_orie_Desktop_Transmute_lds_ecdsa_secp256k1_2019_js_packages_lds_ecdsa_secp256k1_2019_demo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","tslib__WEBPACK_IMPORTED_MODULE_7__","jsonld__WEBPACK_IMPORTED_MODULE_8__","jsonld__WEBPACK_IMPORTED_MODULE_8___default","jsonld_signatures__WEBPACK_IMPORTED_MODULE_9__","jsonld_signatures__WEBPACK_IMPORTED_MODULE_9___default","_EcdsaSecp256k1KeyClass2019__WEBPACK_IMPORTED_MODULE_10__","LinkedDataSignature","suites","EcdsaSecp256k1Signature2019","_LinkedDataSignature","signer","_this","date","useNativeCanonize","call","LDKeyClass","publicKey","verificationMethod","verifier","verifyData","proof","hasValue","_ref5","_this2","documentLoader","_super","create","getVerificationMethod","get","prototype","assertVerificationMethod","_ref6","_this3","document","purpose","expansionMap","matchProof","_callee5","_context5","creator","process","tslib__WEBPACK_IMPORTED_MODULE_1__","jsonld__WEBPACK_IMPORTED_MODULE_2__","jsonld__WEBPACK_IMPORTED_MODULE_2___default","_universalResolver__WEBPACK_IMPORTED_MODULE_3__","versions","node","window","self","documentLoaders","xhr","url","doc","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","indexOf","resolve","Symbol","iterator","done","contextUrl","documentUrl","return","finish","transformArrays","transformObjects","esm5_convertFragmentsToURIs","didDocument","convertedDidDocument","forEach","property","map","universalResolver_getJson","tslib_es6","regenerator_default","browser_default","headers","Accept","method","then","json","normalizeDocument","res","didDoc","methodMetadata","continuation","assertionMethod","authentication","capabilityInvocation","capabilityDelegation","keyAgreement","didUri","didMethod","normalizedDoc","deFragmented","finalDoc","splice","join","base64url__WEBPACK_IMPORTED_MODULE_1__","base64url__WEBPACK_IMPORTED_MODULE_1___default","bitcoin_ts__WEBPACK_IMPORTED_MODULE_2__","_keyUtils__WEBPACK_IMPORTED_MODULE_4__","JWSVerificationFailed","message","name","jws","complete","encodedPayload","encodedSignature","privateKeyJWK","privateKeyUInt8Array","messageHashUInt8Array","signatureUInt8Array","signatureHex","stringify","signMessageHashCompact","toBeSignedBuffer","publicKeyJWK","publicKeyUInt8Array","_b","toBuffer","verifySignatureCompact","r","_EcdsaSecp256k1KeyClass2019__WEBPACK_IMPORTED_MODULE_0__","_EcdsaSecp256k1Signature2019__WEBPACK_IMPORTED_MODULE_1__","_defaultDocumentLoader__WEBPACK_IMPORTED_MODULE_2__","jsigs","require","AssertionProofPurpose","purposes","defaultDocumentLoader","vc","App","state","@context","schema","homepage","image","setState","kty","x","y","suite","compactProof","signed","log","credential","issuer","issuanceDate","credentialSubject","alumniOf","issue","signedVC","vc_issued","result","vc_verified","react_default","createElement","className","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.790eaf1c.chunk.js","sourcesContent":["var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport keyto from '@trust/keyto';\nimport base64url from 'base64url';\nimport crypto from 'crypto';\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\nimport stringify from 'json-stringify-deterministic';\nvar compressedHexEncodedPublicKeyLength = 66;\n/**\n * Example\n * ```js\n * {\n *  kty: 'EC',\n *  crv: 'secp256k1',\n *  d: 'rhYFsBPF9q3-uZThy7B3c4LDF_8wnozFUAEm5LLC4Zw',\n *  x: 'dWCvM4fTdeM0KmloF57zxtBPXTOythHPMm1HCLrdd3A',\n *  y: '36uMVGM7hnw-N6GnjFcihWE3SkrhMLzzLCdPMXPEXlA',\n *  kid: 'JUvpllMEYUZ2joO59UNui_XYDqxVqiFLLAJ8klWuPBw'\n * }\n * ```\n * See [rfc7638](https://tools.ietf.org/html/rfc7638) for more details on JWK.\n */\n\nexport var getKid = function getKid(jwk) {\n  var copy = tslib_1.__assign({}, jwk);\n\n  delete copy.d;\n  delete copy.kid;\n  delete copy.alg;\n  var digest = crypto.createHash('sha256').update(stringify(copy)).digest();\n  return base64url.encode(Buffer.from(digest));\n};\n/** convert compressed hex encoded private key to jwk */\n\nexport var privateJWKFromPrivateKeyHex = function privateJWKFromPrivateKeyHex(privateKeyHex) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var jwk, kid;\n    return tslib_1.__generator(this, function (_a) {\n      jwk = tslib_1.__assign({}, keyto.from(privateKeyHex, 'blk').toJwk('private'), {\n        crv: 'secp256k1'\n      });\n      kid = getKid(jwk);\n      return [2\n      /*return*/\n      , tslib_1.__assign({}, jwk, {\n        kid: kid\n      })];\n    });\n  });\n};\n/** convert compressed hex encoded public key to jwk */\n\nexport var publicJWKFromPublicKeyHex = function publicJWKFromPublicKeyHex(publicKeyHex) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, key, jwk, kid;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          key = publicKeyHex;\n\n          if (publicKeyHex.length === compressedHexEncodedPublicKeyLength) {\n            key = binToHex(secp256k1.uncompressPublicKey(hexToBin(publicKeyHex)));\n          }\n\n          jwk = tslib_1.__assign({}, keyto.from(key, 'blk').toJwk('public'), {\n            crv: 'secp256k1'\n          });\n          kid = getKid(jwk);\n          return [2\n          /*return*/\n          , tslib_1.__assign({}, jwk, {\n            kid: kid\n          })];\n      }\n    });\n  });\n};\n/** convert pem encoded private key to jwk */\n\nexport var privateJWKFromPrivateKeyPem = function privateJWKFromPrivateKeyPem(privateKeyPem) {\n  var jwk = tslib_1.__assign({}, keyto.from(privateKeyPem, 'pem').toJwk('private'), {\n    crv: 'secp256k1'\n  }); // console.log(jwk);\n\n\n  var kid = getKid(jwk);\n  return tslib_1.__assign({}, jwk, {\n    kid: kid\n  });\n};\n/** convert pem encoded private key to jwk */\n\nexport var publicJWKFromPublicKeyPem = function publicJWKFromPublicKeyPem(publicKeyPem) {\n  var jwk = tslib_1.__assign({}, keyto.from(publicKeyPem, 'pem').toJwk('public'), {\n    crv: 'secp256k1'\n  });\n\n  var kid = getKid(jwk);\n  return tslib_1.__assign({}, jwk, {\n    kid: kid\n  });\n};\n/** convert jwk to hex encoded private key */\n\nexport var privateKeyHexFromJWK = function privateKeyHexFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      return [2\n      /*return*/\n      , keyto.from(tslib_1.__assign({}, jwk, {\n        crv: 'K-256'\n      }), 'jwk').toString('blk', 'private')];\n    });\n  });\n};\n/** convert jwk to hex encoded public key */\n\nexport var publicKeyHexFromJWK = function publicKeyHexFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, uncompressedPublicKey, compressed;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _a.sent();\n          uncompressedPublicKey = keyto.from(tslib_1.__assign({}, jwk, {\n            crv: 'K-256'\n          }), 'jwk').toString('blk', 'public');\n          compressed = secp256k1.compressPublicKey(hexToBin(uncompressedPublicKey));\n          return [2\n          /*return*/\n          , binToHex(compressed)];\n      }\n    });\n  });\n};\n/** convert jwk to binary encoded private key */\n\nexport var privateKeyUInt8ArrayFromJWK = function privateKeyUInt8ArrayFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyHex;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyHexFromJWK(jwk)];\n\n        case 1:\n          privateKeyHex = _a.sent();\n          return [2\n          /*return*/\n          , hexToBin(privateKeyHex)];\n      }\n    });\n  });\n};\n/** convert jwk to binary encoded public key */\n\nexport var publicKeyUInt8ArrayFromJWK = function publicKeyUInt8ArrayFromJWK(jwk) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var publicKeyHex;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , publicKeyHexFromJWK(jwk)];\n\n        case 1:\n          publicKeyHex = _a.sent();\n          return [2\n          /*return*/\n          , hexToBin(publicKeyHex)];\n      }\n    });\n  });\n};\nexport default {\n  binToHex: binToHex,\n  getKid: getKid,\n  hexToBin: hexToBin,\n  privateJWKFromPrivateKeyHex: privateJWKFromPrivateKeyHex,\n  privateJWKFromPrivateKeyPem: privateJWKFromPrivateKeyPem,\n  privateKeyHexFromJWK: privateKeyHexFromJWK,\n  privateKeyUInt8ArrayFromJWK: privateKeyUInt8ArrayFromJWK,\n  publicJWKFromPublicKeyHex: publicJWKFromPublicKeyHex,\n  publicJWKFromPublicKeyPem: publicJWKFromPublicKeyPem,\n  publicKeyHexFromJWK: publicKeyHexFromJWK,\n  publicKeyUInt8ArrayFromJWK: publicKeyUInt8ArrayFromJWK\n};","import _classCallCheck from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/regenerator\";\nimport * as tslib_1 from \"tslib\";\nimport * as ES256K from '@transmute/es256k-jws-ts';\nimport base64url from 'base64url';\n/**\n * @ignore\n * Returns an object with an async sign function.\n * The sign function is bound to the KeyPair\n * and then returned by the KeyPair's signer method.\n * @param {EcdsaSecp256k1KeyClass2019} key - An EcdsaSecp256k1KeyClass2019.\n *\n * @returns {{sign: Function}} An object with an async function sign\n * using the private key passed in.\n */\n\nfunction joseSignerFactory(key) {\n  if (!key.privateKeyJwk) {\n    return {\n      sign: function sign(_ref) {\n        var data = _ref.data;\n        return tslib_1.__awaiter(this, void 0, void 0,\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  throw new Error('No private key to sign with.');\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    };\n  }\n\n  return {\n    sign: function sign(_ref2) {\n      var data = _ref2.data;\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var header, toBeSigned;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                header = {\n                  alg: 'ES256K',\n                  b64: false,\n                  crit: ['b64']\n                };\n                toBeSigned = Buffer.from(data.buffer, data.byteOffset, data.length);\n                return _context2.abrupt(\"return\", ES256K.JWS.signDetached(toBeSigned, key.privateKeyJwk, header));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  };\n}\n/**\n * @ignore\n * Returns an object with an async verify function.\n * The verify function is bound to the KeyPair\n * and then returned by the KeyPair's verifier method.\n * @param {EcdsaSecp256k1KeyClass2019} key - An EcdsaSecp256k1KeyClass2019.\n *\n * @returns {{verify: Function}} An async verifier specific\n * to the key passed in.\n */\n\n\nfunction joseVerifierFactory(key) {\n  if (!key.publicKeyJwk) {\n    return {\n      verify: function verify() {\n        return tslib_1.__awaiter(this, void 0, void 0,\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  throw new Error('No public key to verify with.');\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n      }\n    };\n  }\n\n  return {\n    verify: function verify(_ref3) {\n      var data = _ref3.data,\n          signature = _ref3.signature;\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var alg, type, _signature$split, _signature$split2, encodedHeader, encodedSignature, header, verified, payload;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                alg = 'ES256K';\n                type = 'EcdsaSecp256k1VerificationKey2019';\n                _signature$split = signature.split('..'), _signature$split2 = _slicedToArray(_signature$split, 2), encodedHeader = _signature$split2[0], encodedSignature = _signature$split2[1];\n                _context4.prev = 3;\n                header = JSON.parse(base64url.decode(encodedHeader));\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](3);\n                throw new Error('Could not parse JWS header; ' + _context4.t0);\n\n              case 10:\n                if (header && typeof header === 'object') {\n                  _context4.next = 12;\n                  break;\n                }\n\n                throw new Error('Invalid JWS header.');\n\n              case 12:\n                if (!(!(header.alg === alg && header.b64 === false && Array.isArray(header.crit) && header.crit.length === 1 && header.crit[0] === 'b64') && Object.keys(header).length === 3)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                throw new Error(\"Invalid JWS header parameters for \".concat(type, \".\"));\n\n              case 14:\n                verified = false;\n                payload = Buffer.from(data.buffer, data.byteOffset, data.length);\n                _context4.prev = 16;\n                _context4.next = 19;\n                return ES256K.JWS.verifyDetached(signature, payload, key.privateKeyJwk);\n\n              case 19:\n                verified = true;\n                _context4.next = 25;\n                break;\n\n              case 22:\n                _context4.prev = 22;\n                _context4.t1 = _context4[\"catch\"](16);\n                // tslint:disable-next-line:no-console\n                console.error('An error occurred when verifying signature: ', _context4.t1);\n\n              case 25:\n                return _context4.abrupt(\"return\", verified);\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[3, 7], [16, 22]]);\n      }));\n    }\n  };\n}\n\nvar EcdsaSecp256k1KeyClass2019 =\n/*#__PURE__*/\nfunction () {\n  _createClass(EcdsaSecp256k1KeyClass2019, null, [{\n    key: \"fingerprintFromPublicKey\",\n\n    /**\n     * Generates and returns a public key fingerprint using https://tools.ietf.org/html/rfc7638\n     *\n     * @param {string} publicKeyJwk - The jwk encoded public key material.\n     *\n     * @returns {string} The fingerprint.\n     */\n    value: function fingerprintFromPublicKey(_ref4) {\n      var publicKeyJwk = _ref4.publicKeyJwk;\n      var temp = Object.assign({}, publicKeyJwk);\n      delete temp.kid;\n      return ES256K.keyUtils.getKid(temp);\n    }\n    /**\n     * @param {KeyPairOptions} options - The options to use.\n     * @param {string} options.id - The key ID.\n     * @param {string} options.controller - The key controller.\n     * @param {string} options.publicKeyJwk - The JWK encoded Public Key.\n     * @param {string} options.privateKeyJwk - The JWK Private Key.\n     * @param {string} options.alg - The JWS alg for this key.\n     */\n\n  }]);\n\n  function EcdsaSecp256k1KeyClass2019(options) {\n    _classCallCheck(this, EcdsaSecp256k1KeyClass2019);\n\n    this.controller = options.controller;\n    this.type = options.type || 'EcdsaSecp256k1VerificationKey2019';\n    this.privateKeyJwk = options.privateKeyJwk;\n    this.publicKeyJwk = options.publicKeyJwk;\n    this.alg = 'ES256K';\n\n    if (this.publicKeyJwk === undefined) {\n      this.publicKeyJwk = Object.assign({}, this.privateKeyJwk);\n      delete this.publicKeyJwk.d;\n    }\n\n    this.id = options.id || this.controller + '#' + this.fingerprint();\n  } //   /**\n  //    * Returns the JWK encoded public key.\n  //    *\n  //    * @returns {string} The JWK encoded public key.\n  //    */\n  //   get publicKey() {\n  //     return this.publicKeyJwk;\n  //   }\n  //   /**\n  //    * Returns the JWK encoded private key.\n  //    *\n  //    * @returns {string} The JWK encoded private key.\n  //    */\n  //   get privateKey() {\n  //     return this.privateKeyJwk;\n  //   }\n\n  /**\n   * Returns a signer object for use with jsonld-signatures.\n   *\n   * @returns {{sign: Function}} A signer for the json-ld block.\n   */\n\n\n  _createClass(EcdsaSecp256k1KeyClass2019, [{\n    key: \"signer\",\n    value: function signer() {\n      return joseSignerFactory(this);\n    }\n    /**\n     * Returns a verifier object for use with jsonld-signatures.\n     *\n     * @returns {{verify: Function}} Used to verify jsonld-signatures.\n     */\n\n  }, {\n    key: \"verifier\",\n    value: function verifier() {\n      return joseVerifierFactory(this);\n    }\n    /**\n     * Adds a public key base to a public key node.\n     *\n     * @param {Object} publicKeyNode - The public key node in a jsonld-signature.\n     * @param {string} publicKeyNode.publicKeyJwk - JWK Public Key for\n     *   jsonld-signatures.\n     *\n     * @returns {Object} A PublicKeyNode in a block.\n     */\n\n  }, {\n    key: \"addEncodedPublicKey\",\n    value: function addEncodedPublicKey(publicKeyNode) {\n      publicKeyNode.publicKeyJwk = this.publicKeyJwk;\n      return publicKeyNode;\n    }\n    /**\n     * Generates and returns a public key fingerprint using https://tools.ietf.org/html/rfc7638\n     *\n     * @returns {string} The fingerprint.\n     */\n\n  }, {\n    key: \"fingerprint\",\n    value: function fingerprint() {\n      var temp = Object.assign({}, this.publicKeyJwk);\n      delete temp.kid;\n      return ES256K.keyUtils.getKid(temp);\n    } //   /**\n    //    * Tests whether the fingerprint was generated from a given key pair.\n    //    *\n    //    * @param {string} fingerprint - A JWK public key.\n    //    *\n    //    * @returns {Object} An object indicating valid is true or false.\n    //    */\n    //   verifyFingerprint(/*fingerprint*/) {\n    //     // TODO: implement\n    //     throw new Error('`verifyFingerprint` API is not implemented.');\n    //   }\n    //   static async from(options) {\n    //     return new EcdsaSecp256k1KeyClass2019(options);\n    //   }\n\n    /**\n     * Contains the public key for the KeyPair\n     * and other information that json-ld Signatures can use to form a proof.\n     * @param {Object} [options={}] - Needs either a controller or owner.\n     * @param {string} [options.controller=this.controller]  - DID of the\n     * person/entity controlling this key pair.\n     *\n     * @returns {Object} A public node with\n     * information used in verification methods by signatures.\n     */\n\n  }, {\n    key: \"publicNode\",\n    value: function publicNode() {\n      var controller = this.controller;\n      var publicNode = {\n        id: this.id,\n        type: this.type\n      };\n\n      if (controller) {\n        publicNode.controller = controller;\n      }\n\n      this.addEncodedPublicKey(publicNode); // Subclass-specific\n\n      return publicNode;\n    }\n  }]);\n\n  return EcdsaSecp256k1KeyClass2019;\n}();\n\nexport default EcdsaSecp256k1KeyClass2019;","import _regeneratorRuntime from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as tslib_1 from \"tslib\";\nimport jsonld from 'jsonld';\nimport jsigs from 'jsonld-signatures';\nvar LinkedDataSignature = jsigs.suites.LinkedDataSignature;\nexport { LinkedDataSignature };\nimport EcdsaSecp256k1KeyClass2019 from './EcdsaSecp256k1KeyClass2019';\nvar requiredKeyType = 'EcdsaSecp256k1VerificationKey2019';\nvar proofSignatureKey = 'jws';\n\nvar EcdsaSecp256k1Signature2019 =\n/*#__PURE__*/\nfunction (_LinkedDataSignature) {\n  _inherits(EcdsaSecp256k1Signature2019, _LinkedDataSignature);\n\n  /**\n   * @param linkedDataSigantureType {string} The name of the signature suite.\n   * @param linkedDataSignatureVerificationKeyType {string} The name verification key type for the signature suite.\n   *\n   * @param alg {string} JWS alg provided by subclass.\n   * @param [LDKeyClass] {LDKeyClass} provided by subclass or subclass\n   *   overrides `getVerificationMethod`.\n   *\n   *\n   * This parameter is required for signing:\n   *\n   * @param [signer] {function} an optional signer.\n   *\n   * @param [proofSignatureKey] {string} the property in the proof that will contain the signature.\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [key] {LDKeyPair} an optional crypto-ld KeyPair.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  function EcdsaSecp256k1Signature2019(_ref) {\n    var _this;\n\n    var signer = _ref.signer,\n        key = _ref.key,\n        date = _ref.date,\n        useNativeCanonize = _ref.useNativeCanonize;\n\n    _classCallCheck(this, EcdsaSecp256k1Signature2019);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EcdsaSecp256k1Signature2019).call(this, {\n      type: 'EcdsaSecp256k1Signature2019',\n      LDKeyClass: EcdsaSecp256k1KeyClass2019,\n      date: date,\n      useNativeCanonize: useNativeCanonize\n    }));\n    _this.alg = 'ES256K';\n    _this.LDKeyClass = EcdsaSecp256k1KeyClass2019;\n\n    if (key) {\n      var publicKey = key.publicNode();\n      _this.verificationMethod = publicKey.id;\n      _this.key = key;\n\n      if (typeof key.signer === 'function') {\n        _this.signer = key.signer();\n      }\n\n      if (typeof key.verifier === 'function') {\n        _this.verifier = key.verifier(key, _this.alg, _this.type);\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Produces a linked data signature.\n   *\n   * @param verifyData {Uint8Array}.\n   * @param proof {object}\n   *\n   * @returns {Promise<{object}>} the proof containing the signature value.\n   */\n\n\n  _createClass(EcdsaSecp256k1Signature2019, [{\n    key: \"sign\",\n    value: function sign(_ref2) {\n      var verifyData = _ref2.verifyData,\n          proof = _ref2.proof;\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.signer && typeof this.signer.sign === 'function') {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('A signer API has not been specified.');\n\n              case 2:\n                _context.next = 4;\n                return this.signer.sign({\n                  data: verifyData\n                });\n\n              case 4:\n                proof[proofSignatureKey] = _context.sent;\n                return _context.abrupt(\"return\", proof);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Verifies a linked data signature\n     *\n     * @param verifyData {Uint8Array}.\n     * @param verificationMethod {object}.\n     * @param document {object} the document the proof applies to.\n     * @param proof {object} the proof to be verified.\n     * @param purpose {ProofPurpose}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     *\n     * @returns {Promise<{boolean}>} Resolves with the verification result.\n     */\n\n  }, {\n    key: \"verifySignature\",\n    value: function verifySignature(_ref3) {\n      var verifyData = _ref3.verifyData,\n          verificationMethod = _ref3.verificationMethod,\n          proof = _ref3.proof;\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var verifier, key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                verifier = this.verifier;\n\n                if (verifier) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this.LDKeyClass.from(verificationMethod);\n\n              case 4:\n                key = _context2.sent;\n                verifier = key.verifier(key, this.alg, this.type);\n\n              case 6:\n                return _context2.abrupt(\"return\", verifier.verify({\n                  data: Buffer.from(verifyData),\n                  signature: proof[proofSignatureKey]\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /** ensure there is a way to verify */\n\n  }, {\n    key: \"assertVerificationMethod\",\n    value: function assertVerificationMethod(_ref4) {\n      var verificationMethod = _ref4.verificationMethod;\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (jsonld.hasValue(verificationMethod, 'type', requiredKeyType)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Invalid key type. Key type must be \\\"\".concat(requiredKeyType, \"\\\".\"));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n    /** used by linked data signatures and vc libraries */\n\n  }, {\n    key: \"getVerificationMethod\",\n    value: function getVerificationMethod(_ref5) {\n      var _this2 = this;\n\n      var proof = _ref5.proof,\n          documentLoader = _ref5.documentLoader;\n\n      var _super = Object.create(null, {\n        getVerificationMethod: {\n          get: function get() {\n            return _get(_getPrototypeOf(EcdsaSecp256k1Signature2019.prototype), \"getVerificationMethod\", _this2);\n          }\n        }\n      });\n\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var verificationMethod;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.key) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.key.publicNode());\n\n              case 2:\n                _context4.next = 4;\n                return _super.getVerificationMethod.call(this, {\n                  proof: proof,\n                  documentLoader: documentLoader\n                });\n\n              case 4:\n                verificationMethod = _context4.sent;\n                _context4.next = 7;\n                return this.assertVerificationMethod({\n                  verificationMethod: verificationMethod\n                });\n\n              case 7:\n                return _context4.abrupt(\"return\", verificationMethod);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /** used by linked data signatures and vc libraries */\n\n  }, {\n    key: \"matchProof\",\n    value: function matchProof(_ref6) {\n      var _this3 = this;\n\n      var proof = _ref6.proof,\n          document = _ref6.document,\n          purpose = _ref6.purpose,\n          documentLoader = _ref6.documentLoader,\n          expansionMap = _ref6.expansionMap;\n\n      var _super = Object.create(null, {\n        matchProof: {\n          get: function get() {\n            return _get(_getPrototypeOf(EcdsaSecp256k1Signature2019.prototype), \"matchProof\", _this3);\n          }\n        }\n      });\n\n      return tslib_1.__awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var verificationMethod;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _super.matchProof.call(this, {\n                  proof: proof,\n                  document: document,\n                  purpose: purpose,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 2:\n                if (_context5.sent) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", false);\n\n              case 4:\n                if (this.key) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", true);\n\n              case 6:\n                verificationMethod = proof.verificationMethod;\n\n                if (!verificationMethod) {\n                  verificationMethod = proof.creator;\n                } // only match if the key specified matches the one in the proof\n\n\n                if (!(typeof verificationMethod === 'object')) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", verificationMethod.id === this.key.id);\n\n              case 10:\n                return _context5.abrupt(\"return\", verificationMethod === this.key.id);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }]);\n\n  return EcdsaSecp256k1Signature2019;\n}(LinkedDataSignature);\n\nexport default EcdsaSecp256k1Signature2019;","import _regeneratorRuntime from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/regenerator\";\n\nvar _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport jsonld from 'jsonld';\nimport resolver from './universalResolver';\n\nvar _nodejs = // tslint:disable-next-line\ntypeof process !== 'undefined' && process.versions && process.versions.node;\n\nvar _browser = // tslint:disable-next-line\n!_nodejs && (typeof window !== 'undefined' || typeof self !== 'undefined');\n\nvar documentLoader = _browser ? jsonld.documentLoaders.xhr() : jsonld.documentLoaders.node();\nexport default (function (url) {\n  return tslib_1.__awaiter(_this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var doc, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, publicKey;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(url.indexOf('did:') === 0)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 3;\n            return resolver.resolve(url);\n\n          case 3:\n            doc = _context.sent;\n\n            if (!url.indexOf('#')) {\n              _context.next = 31;\n              break;\n            }\n\n            // iterate public keys, find the correct id...\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 8;\n            _iterator = doc.publicKey[Symbol.iterator]();\n\n          case 10:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 17;\n              break;\n            }\n\n            publicKey = _step.value;\n\n            if (!(publicKey.id === url)) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              contextUrl: null,\n              document: publicKey,\n              documentUrl: url\n            });\n\n          case 14:\n            _iteratorNormalCompletion = true;\n            _context.next = 10;\n            break;\n\n          case 17:\n            _context.next = 23;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](8);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 23:\n            _context.prev = 23;\n            _context.prev = 24;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 26:\n            _context.prev = 26;\n\n            if (!_didIteratorError) {\n              _context.next = 29;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 29:\n            return _context.finish(26);\n\n          case 30:\n            return _context.finish(23);\n\n          case 31:\n            return _context.abrupt(\"return\", {\n              contextUrl: null,\n              document: doc,\n              documentUrl: url\n            });\n\n          case 32:\n            return _context.abrupt(\"return\", documentLoader(url));\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 19, 23, 31], [24,, 26, 30]]);\n  }));\n});","var transformArrays = ['assertionMethod', 'authentication', 'capabilityDelegation', 'capabilityInvocation'];\nvar transformObjects = ['publicKey', 'keyAgreement'];\n\nvar convertFragmentsToURIs = function convertFragmentsToURIs(didDocument) {\n  var convertedDidDocument = Object.assign({}, didDocument);\n  transformObjects.forEach(function (property) {\n    if (convertedDidDocument[property]) {\n      convertedDidDocument[property].forEach(function (value) {\n        if (value.id[0] === '#') {\n          value.id = convertedDidDocument.id + value.id;\n        }\n\n        if (!value.controller) {\n          value.controller = convertedDidDocument.id;\n        }\n      });\n    }\n  });\n  transformArrays.forEach(function (property) {\n    if (convertedDidDocument[property]) {\n      convertedDidDocument[property] = convertedDidDocument[property].map(function (value) {\n        if (value[0] === '#') {\n          return convertedDidDocument.id + value;\n        }\n\n        return value;\n      });\n    }\n  });\n  return convertedDidDocument;\n};\n\nexport default convertFragmentsToURIs;","import _regeneratorRuntime from \"/Users/orie/Desktop/Transmute/lds-ecdsa-secp256k1-2019.js/packages/lds-ecdsa-secp256k1-2019-demo/node_modules/@babel/runtime/regenerator\";\n\nvar _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport fetch from 'node-fetch';\nimport convertFragmentsToURIs from './convertFragmentsToURIs';\n\nvar getJson = function getJson(url) {\n  return tslib_1.__awaiter(_this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", fetch(url, {\n              headers: {\n                Accept: 'application/ld+json'\n              },\n              method: 'get'\n            }).then(function (data) {\n              return data.json();\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nvar normalizeDocument = function normalizeDocument(res) {\n  var didDoc = res.id && res.id.indexOf('did:') === 0 ? res : Object.assign({}, res.didDocument); // hack for BTCR.\n\n  if (res.methodMetadata) {\n    if (res.methodMetadata.continuation.publicKey) {\n      didDoc.publicKey = res.methodMetadata.continuation.publicKey;\n    }\n\n    if (res.methodMetadata.continuation.assertionMethod) {\n      didDoc.assertionMethod = res.methodMetadata.continuation.assertionMethod;\n    }\n\n    if (res.methodMetadata.continuation.authentication) {\n      didDoc.authentication = res.methodMetadata.continuation.authentication;\n    }\n\n    if (res.methodMetadata.continuation.capabilityInvocation) {\n      didDoc.capabilityInvocation = res.methodMetadata.continuation.capabilityInvocation;\n    }\n\n    if (res.methodMetadata.continuation.capabilityDelegation) {\n      didDoc.capabilityDelegation = res.methodMetadata.continuation.capabilityDelegation;\n    }\n\n    if (res.methodMetadata.continuation.keyAgreement) {\n      didDoc.keyAgreement = res.methodMetadata.continuation.keyAgreement;\n    }\n  }\n\n  return didDoc;\n};\n\nexport default {\n  resolve: function resolve(didUri) {\n    return tslib_1.__awaiter(_this, void 0, void 0,\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var didMethod, res, normalizedDoc, deFragmented, finalDoc;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              didMethod = didUri.split(':').splice(0, 2).join(':');\n              _context2.t0 = didMethod;\n              _context2.next = _context2.t0 === 'did:elem' ? 5 : 9;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return getJson('https://element-did.com/api/v1/sidetree/' + didUri);\n\n            case 7:\n              res = _context2.sent;\n              return _context2.abrupt(\"break\", 12);\n\n            case 9:\n              _context2.next = 11;\n              return getJson('https://uniresolver.io/1.0/identifiers/' + didUri);\n\n            case 11:\n              res = _context2.sent;\n\n            case 12:\n              _context2.next = 14;\n              return normalizeDocument(res);\n\n            case 14:\n              normalizedDoc = _context2.sent;\n              deFragmented = convertFragmentsToURIs(normalizedDoc);\n              finalDoc = deFragmented;\n              return _context2.abrupt(\"return\", finalDoc);\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t1 = _context2[\"catch\"](0);\n              // tslint:disable-next-line:no-console\n              console.error('Could not resolve: ' + didUri);\n              throw new Error(_context2.t1);\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 20]]);\n    }));\n  }\n};","var _this = this;\n\nimport * as tslib_1 from \"tslib\";\nimport base64url from 'base64url';\nimport { binToHex, hexToBin, instantiateSecp256k1 } from 'bitcoin-ts';\nimport crypto from 'crypto';\nimport { privateKeyUInt8ArrayFromJWK, publicKeyUInt8ArrayFromJWK } from './keyUtils';\n/** error matching @panva/jose for JWS verification failure. */\n\nvar JWSVerificationFailed =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(JWSVerificationFailed, _super);\n\n  function JWSVerificationFailed(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'JWSVerificationFailed';\n    return _this;\n  }\n\n  return JWSVerificationFailed;\n}(Error);\n/** Produce a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\n\n\nexport var signDetached = function signDetached( // in the case of EcdsaSecp256k1Signature2019 this is the result of createVerifyData\npayload, privateKeyJWK, header) {\n  if (header === void 0) {\n    header = {\n      alg: 'ES256K',\n      b64: false,\n      crit: ['b64']\n    };\n  }\n\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyUInt8Array, secp256k1, encodedHeader, toBeSignedBuffer, message, digest, messageHashUInt8Array, signatureUInt8Array, signatureHex, encodedSignature;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyUInt8ArrayFromJWK(privateKeyJWK)];\n\n        case 1:\n          privateKeyUInt8Array = _a.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _a.sent();\n          encodedHeader = base64url.encode(JSON.stringify(header));\n          toBeSignedBuffer = Buffer.concat([Buffer.from(encodedHeader + '.', 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]);\n          message = Buffer.from(toBeSignedBuffer);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = secp256k1.signMessageHashCompact(privateKeyUInt8Array, messageHashUInt8Array);\n          signatureHex = binToHex(signatureUInt8Array);\n          encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n          return [2\n          /*return*/\n          , encodedHeader + \"..\" + encodedSignature];\n      }\n    });\n  });\n};\n/** Verify a JWS Unencoded Payload per https://tools.ietf.org/html/rfc7797#section-6 */\n\nexport var verifyDetached = function verifyDetached(jws, payload, publicKeyJWK) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var _a, encodedHeader, encodedSignature, header, publicKeyUInt8Array, secp256k1, toBeSignedBuffer, message, digest, messageHashUInt8Array, signatureUInt8Array, verified;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (jws.indexOf('..') === -1) {\n            throw new JWSVerificationFailed('not a valid rfc7797 jws.');\n          }\n\n          _a = jws.split('..'), encodedHeader = _a[0], encodedSignature = _a[1];\n          header = JSON.parse(base64url.decode(encodedHeader));\n\n          if (header.alg !== 'ES256K') {\n            throw new Error('JWS alg is not signed with ES256K.');\n          }\n\n          if (header.b64 !== false || !header.crit || !header.crit.length || header.crit[0] !== 'b64') {\n            throw new Error('JWS Header is not in rfc7797 format (not detached).');\n          }\n\n          return [4\n          /*yield*/\n          , publicKeyUInt8ArrayFromJWK(publicKeyJWK)];\n\n        case 1:\n          publicKeyUInt8Array = _b.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _b.sent();\n          toBeSignedBuffer = Buffer.concat([Buffer.from(encodedHeader + '.', 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]);\n          message = Buffer.from(toBeSignedBuffer);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = hexToBin(base64url.toBuffer(encodedSignature).toString('hex'));\n          verified = secp256k1.verifySignatureCompact(signatureUInt8Array, publicKeyUInt8Array, messageHashUInt8Array);\n\n          if (verified) {\n            return [2\n            /*return*/\n            , true];\n          }\n\n          throw new Error('Cannot verify detached signature.');\n      }\n    });\n  });\n};\n/** Produce a normal ES256K JWS */\n\nexport var sign = function sign(payload, privateKeyJWK, header) {\n  if (header === void 0) {\n    header = {\n      alg: 'ES256K'\n    };\n  }\n\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var privateKeyUInt8Array, secp256k1, encodedHeader, encodedPayload, toBeSigned, message, digest, messageHashUInt8Array, signatureUInt8Array, signatureHex, encodedSignature;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , privateKeyUInt8ArrayFromJWK(privateKeyJWK)];\n\n        case 1:\n          privateKeyUInt8Array = _a.sent();\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 2:\n          secp256k1 = _a.sent();\n          encodedHeader = base64url.encode(JSON.stringify(header));\n          encodedPayload = base64url.encode(JSON.stringify(payload));\n          toBeSigned = encodedHeader + \".\" + encodedPayload;\n          message = Buffer.from(toBeSigned);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = secp256k1.signMessageHashCompact(privateKeyUInt8Array, messageHashUInt8Array);\n          signatureHex = binToHex(signatureUInt8Array);\n          encodedSignature = base64url.encode(Buffer.from(signatureHex, 'hex'));\n          return [2\n          /*return*/\n          , encodedHeader + \".\" + encodedPayload + \".\" + encodedSignature];\n      }\n    });\n  });\n};\n/** Verify an ES256K JWS, returns the decoded object if successful, throws otherwise. */\n\nexport var verify = function verify(jws, publicKeyJWK) {\n  return tslib_1.__awaiter(_this, void 0, void 0, function () {\n    var secp256k1, publicKeyUInt8Array, _a, encodedHeader, encodedPayload, encodedSignature, toBeSigned, message, digest, messageHashUInt8Array, signatureUInt8Array, verified;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , instantiateSecp256k1()];\n\n        case 1:\n          secp256k1 = _b.sent();\n          return [4\n          /*yield*/\n          , publicKeyUInt8ArrayFromJWK(publicKeyJWK)];\n\n        case 2:\n          publicKeyUInt8Array = _b.sent();\n          _a = jws.split('.'), encodedHeader = _a[0], encodedPayload = _a[1], encodedSignature = _a[2];\n          toBeSigned = encodedHeader + \".\" + encodedPayload;\n          message = Buffer.from(toBeSigned);\n          digest = crypto.createHash('sha256').update(message).digest().toString('hex');\n          messageHashUInt8Array = hexToBin(digest);\n          signatureUInt8Array = hexToBin(base64url.toBuffer(encodedSignature).toString('hex'));\n          verified = secp256k1.verifySignatureCompact(signatureUInt8Array, publicKeyUInt8Array, messageHashUInt8Array);\n\n          if (verified) {\n            return [2\n            /*return*/\n            , JSON.parse(base64url.decode(encodedPayload))];\n          }\n\n          throw new JWSVerificationFailed('signature verification failed');\n      }\n    });\n  });\n};\n/** decode a JWS (without verifying it) */\n\nexport var decode = function decode(jws, options) {\n  if (options === void 0) {\n    options = {\n      complete: false\n    };\n  }\n\n  var _a = jws.split('.'),\n      encodedHeader = _a[0],\n      encodedPayload = _a[1],\n      encodedSignature = _a[2];\n\n  if (options.complete) {\n    return {\n      header: JSON.parse(base64url.decode(encodedHeader)),\n      payload: JSON.parse(base64url.decode(encodedPayload)),\n      signature: encodedSignature\n    };\n  }\n\n  return JSON.parse(base64url.decode(encodedPayload));\n};\nexport default {\n  decode: decode,\n  sign: sign,\n  signDetached: signDetached,\n  verify: verify,\n  verifyDetached: verifyDetached\n};","export { default as EcdsaSecp256k1KeyClass2019 } from './EcdsaSecp256k1KeyClass2019';\nexport { default as EcdsaSecp256k1Signature2019 } from './EcdsaSecp256k1Signature2019';\nexport { default as defaultDocumentLoader } from './defaultDocumentLoader';","import React from 'react';\n\nconst jsigs = require('jsonld-signatures');\n\nconst { AssertionProofPurpose } = jsigs.purposes;\n\nconst {\n  EcdsaSecp256k1KeyClass2019,\n  EcdsaSecp256k1Signature2019,\n  defaultDocumentLoader,\n} = require('@transmute/lds-ecdsa-secp256k1-2019');\n\nconst vc = require('vc-js');\n\nclass App extends React.Component {\n  state = {};\n  async componentWillMount() {\n    const doc = {\n      '@context': [\n        {\n          schema: 'http://schema.org/',\n          name: 'schema:name',\n          homepage: 'schema:url',\n          image: 'schema:image',\n        },\n      ],\n      name: 'Manu Sporny',\n      homepage: 'https://manu.sporny.org/',\n      image: 'https://manu.sporny.org/images/manu.png',\n    };\n    this.setState({\n      doc,\n    });\n    const key = new EcdsaSecp256k1KeyClass2019({\n      id:\n        'did:elem:EiChaglAoJaBq7bGWp6bA5PAQKaOTzVHVXIlJqyQbljfmg#qfknmVDhMi3Uc190IHBRfBRqMgbEEBRzWOj1E9EmzwM',\n      controller: 'did:elem:EiChaglAoJaBq7bGWp6bA5PAQKaOTzVHVXIlJqyQbljfmg',\n      privateKeyJwk: {\n        kty: 'EC',\n        crv: 'secp256k1',\n        d: 'wNZx20zCHoOehqaBOFsdLELabfv8sX0612PnuAiyc-g',\n        x: 'NbASvplLIO_XTzP9R69a3MuqOO0DQw2LGnhJjirpd4w',\n        y: 'EiZOvo9JWPz1yGlNNW66IV8uA44EQP_Yv_E7OZl1NG0',\n        kid: 'qfknmVDhMi3Uc190IHBRfBRqMgbEEBRzWOj1E9EmzwM',\n      },\n    });\n\n    const suite = new EcdsaSecp256k1Signature2019({\n      key,\n    });\n    const signed = await jsigs.sign(doc, {\n      compactProof: false,\n      documentLoader: defaultDocumentLoader,\n      purpose: new AssertionProofPurpose(),\n      suite,\n    });\n\n    this.setState({\n      signed: signed,\n    });\n    const res = await jsigs.verify(signed, {\n      suite,\n\n      compactProof: false,\n      // controller: didDoc,\n      documentLoader: defaultDocumentLoader,\n      purpose: new AssertionProofPurpose(),\n    });\n    // Leave for development purposes\n    if (!res.verified) {\n      // tslint:disable-next-line:no-console\n      console.log(res);\n    }\n    this.setState({\n      verified: res,\n    });\n\n    // Sample unsigned credential\n    const credential = {\n      '@context': [\n        'https://www.w3.org/2018/credentials/v1',\n        'https://www.w3.org/2018/credentials/examples/v1',\n      ],\n      id: 'https://example.com/credentials/1872',\n      type: ['VerifiableCredential', 'AlumniCredential'],\n      issuer: key.controller,\n      issuanceDate: '2010-01-01T19:23:24Z',\n      credentialSubject: {\n        id: 'did:example:ebfeb1f712ebc6f1c276e12ec21',\n        alumniOf: 'Example University',\n      },\n    };\n\n    const signedVC = await vc.issue({ credential, suite });\n\n    this.setState({\n      vc_issued: signedVC,\n    });\n\n    const result = await vc.verify({\n      credential: signedVC,\n      suite,\n      documentLoader: defaultDocumentLoader,\n    });\n\n    this.setState({\n      vc_verified: result,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h5>EcdsaSecp256k1Signature2019</h5>\n        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}